exp(forecast_10days$lower[day_forward,1])
exp(forecast_10days$upper[day_forward,1])
day_forward <- "2020-09" - "2020-08"
day_forward <- as.numeric("2020-09" - "2020-08")
day_forward <- 1
exp(forecast_10days$mean[day_forward])
exp(forecast_10days$lower[day_forward,1])
exp(forecast_10days$upper[day_forward,1])
forecast_10days$mean
day_forward <- 2
exp(forecast_15days$mean[day_forward])
exp(forecast_15days$lower[day_forward,1])
exp(forecast_15days$upper[day_forward,1])
# Oct 20
day_forward <- 2
exp(forecast_10days$mean[day_forward])
exp(forecast_10days$lower[day_forward,1])
exp(forecast_10days$upper[day_forward,1])
View(montly_mean)
Met_Data <- Baoan_Data %>%
mutate(temp=substr(TMP, 1,5), temp_quality=substr(TMP, 7,7)) %>%
mutate(temp_new = as.numeric(temp), temp_quality_new = as.logical(as.numeric(temp_quality))) %>%
mutate(temp_new=temp_new*0.1)
View(Met_Data)
Met_Data$temp_new[which(Met_Data$temp_new==9999)]<- NA
for(i in 1:length(Met_Data$temp_new)){
if( is.na(Met_Data$temp_new[i])){
Met_Data$temp_new[i] <- mean(Met_Data$temp_new[(i-2):(i+2)],na.rm=T )
}
}
Met_Data$temp_quality_new[!which(Met_Data$temp_quality_new)]       <- NA
Met_Data <- Baoan_Data %>%
mutate(temp=substr(TMP, 1,5), temp_quality=substr(TMP, 7,7)) %>%
mutate(temp_new = as.numeric(temp), temp_quality_new = as.logical(as.numeric(temp_quality)))
Met_Data$temp_new[which(Met_Data$temp_new==9999)]<- NA
for(i in 1:length(Met_Data$temp_new)){
if( is.na(Met_Data$temp_new[i])){
Met_Data$temp_new[i] <- mean(Met_Data$temp_new[(i-2):(i+2)],na.rm=T )
}
}
Met_Data$temp_quality_new[!which(Met_Data$temp_quality_new)]       <- NA
Met_Data %>%
mutate(temp_new=temp_new*0.1)
View(Met_Data)
Met_Data <- Baoan_Data %>%
mutate(temp=substr(TMP, 1,5), temp_quality=substr(TMP, 7,7)) %>%
mutate(temp_new = as.numeric(temp), temp_quality_new = as.logical(as.numeric(temp_quality)))
# Handel missing values
Met_Data$temp_new[which(Met_Data$temp_new==9999)]<- NA
for(i in 1:length(Met_Data$temp_new)){
if( is.na(Met_Data$temp_new[i])){
Met_Data$temp_new[i] <- mean(Met_Data$temp_new[(i-2):(i+2)],na.rm=T )
}
}
Met_Data$temp_quality_new[!which(Met_Data$temp_quality_new)]       <- NA
Met_Data1 <- Met_Data %>%
mutate(temp_new=temp_new*0.1)
View(Met_Data1)
montly_mean <- c()
for (i in 2010:2020) {
Thisyear_mean <- Met_Data1 %>%
select(DATE, temp_new, temp_quality_new) %>%
mutate(month=substr(DATE, 1, 7)) %>%
mutate(year=substr(DATE,1,4)) %>%
mutate(year2=as.numeric(year)) %>%
filter(year2==i) %>%
group_by(month) %>%
summarise(mean=mean(temp_new, na.rm = T))
montly_mean <- rbind(montly_mean, Thisyear_mean)
}
Monthly_mean1 <- montly_mean %>%
filter(month <= "2020-08" & month >= "2010-01")
# Apply the ts() function
TEMP_mean <- ts(Monthly_mean1$mean, start=c(2010,1), frequency=12)
plot(TEMP_mean, type="l")
TEMP_mean_components <- decompose(TEMP_mean)
plot(TEMP_mean_components)
TEMP_mean_log <- log(TEMP_mean)
plot(TEMP_mean_log, type="l")
TEMP_mean_log_components <- decompose(TEMP_mean_log)
plot(TEMP_mean_log_components)
TEMP_mean_log_d1 <- diff(TEMP_mean_log)
plot(TEMP_mean_log_d1)
model <- auto.arima(TEMP_mean_log)
model
days_forecast  <- 10
# Number of include in the plot
days_in_plot   <- 20
# Make predictions using the forecast() function
forecast_10days <- forecast(model, days_forecast)
# Plot
plot(forecast(model, days_forecast), include=days_in_plot,
xlab="Time", ylab="log(global cases)",type="o",lwd=2)
day_forward <- 1
exp(forecast_10days$mean[day_forward])
exp(forecast_10days$lower[day_forward,1])
exp(forecast_10days$upper[day_forward,1])
# Oct 20
day_forward <- 2
exp(forecast_10days$mean[day_forward])
exp(forecast_10days$lower[day_forward,1])
exp(forecast_10days$upper[day_forward,1])
View(montly_mean)
day_forward <- (2020-2010)*12+9-(2020-2010)+8
day_forward <- (2020-2010)*12+9-(2020-2010)*12+8
day_forward
day_forward <- (2020-2010)*12+9-((2020-2010)*12+8)
day_forward
day_forward <- (2020-2010)*12+10-((2020-2010)*12+8)
day_forward
day_forward <- (2020-2010)*12+9-((2020-2010)*12+8) #(year-start_year)*12+month-((end_year-start_year)*12+end_month)
exp(forecast_10days$mean[day_forward])
exp(forecast_10days$lower[day_forward,1])
exp(forecast_10days$upper[day_forward,1])
day_forward <- (2020-2010)*12+10-((2020-2010)*12+8)
exp(forecast_10days$mean[day_forward])
exp(forecast_10days$lower[day_forward,1])
exp(forecast_10days$upper[day_forward,1])
library(dplyr)
library(ggplot2)
library(gapminder)
install.packages("readxl")
library(readxl)
TG_rain <- read_excel("tongguan.xls", sheet="rain")
head(TG_rain)
getwd()
library(fields);
library(maps);
library(RNetCDF)
# Open the NetCDF file
ex.nc     <- open.nc("precip.mon.ltm.nc")
# Print the variables and attributes
print.nc(ex.nc)
# Read the variables
# Lat
Lat       <- var.get.nc(ex.nc, "lat")
# Lon
Lon       <- var.get.nc(ex.nc, "lon")
# Long Term Mean Average Monthly Rate of Precipitation mm/day
precip_T     <- var.get.nc(ex.nc, "precip")
# Close the NetCDF file
close.nc(ex.nc)
# Original Lat is in decreasing order, we need to reverse it
Lat <- rev(Lat)
# Open the NetCDF file
ex.nc     <- open.nc("precip.mon.ltm.nc")
# Print the variables and attributes
print.nc(ex.nc)
# Read the variables
# Lat
Lat       <- var.get.nc(ex.nc, "lat")
# Lon
Lon       <- var.get.nc(ex.nc, "lon")
# Long Term Mean Average Monthly Rate of Precipitation mm/day
precip_T     <- var.get.nc(ex.nc, "precip")
# Close the NetCDF file
close.nc(ex.nc)
# Original Lat is in decreasing order, we need to reverse it
Lat <- rev(Lat)
# Data transformation of precip_T_Jan
precip_T_Jan <- array(NA,dim=c(length(Lon), length(Lat)))
for(row in 1:length(Lat)){
precip_T_Jan[,row] <- precip_T[, (length(Lat)+1-row),1 ]
}
image.plot(Lon, Lat,precip_T_Jan)
# Open the NetCDF file
ex.nc     <- open.nc("precip.mon.ltm.nc")
# Print the variables and attributes
print.nc(ex.nc)
# Read the variables
# Lat
Lat       <- var.get.nc(ex.nc, "lat")
# Lon
Lon       <- var.get.nc(ex.nc, "lon")
# Long Term Mean Average Monthly Rate of Precipitation mm/day
precip_T     <- var.get.nc(ex.nc, "precip")
# Close the NetCDF file
close.nc(ex.nc)
# Original Lat is in decreasing order, we need to reverse it
Lat <- rev(Lat)
# Data transformation of precip_T_Jan
precip_T_Jan <- array(NA,dim=c(length(Lon), length(Lat)))
for(row in 1:length(Lat)){
precip_T_Jan[,row] <- precip_T[, (length(Lat)+1-row),1 ]
}
image.plot(Lon, Lat,precip_T_Jan)
image.plot(Lon, Lat,precip_T_Jan)
# Set margins on bottom, left, top, right
par(mar=c(4.5,3,2,1))
# Plot
image.plot(Lon, Lat, precip_T_Jan,
horizontal=T, useRaster=T,
legend.shrink=0.75, axis.args=list(cex.axis = 1.25),
legend.width=1, legend.mar=2,
legend.args=list(text="Rate of Precipitation mm/day",cex=1.25),
xlab='',ylab='',midpoint=T, axes=F, ann=F
)
title(xlab="",cex.lab=1.25,font.lab=2)
axis(1,at=pretty(Lon),tck=-0.015,lwd=2,cex.axis=1.25,font=1)
title(ylab="",cex.lab=1.25,font.lab=2)
axis(2,at=pretty(Lat),tck=-0.015,lwd=2,cex.axis=1.25,font=1,las=1)
title(main=paste("Long Term (1981-2010) Mean Average Monthly Rate of Precipitation in Jan."),
cex.main=1,font.main=2)
# Add map
map('world',add=T,lwd=0.75,col="black")
# Add a box
box(lwd=2)
# Set the png format
png("Precip_T.png", width=8.5, height=6, units="in", res=400)
# Set margins on bottom, left, top, right
par(mar=c(4.5,3,2,1))
# Plot
image.plot(Lon, Lat, precip_T_Jan,
horizontal=T, useRaster=T,
legend.shrink=0.75, axis.args=list(cex.axis = 1.25),
legend.width=1, legend.mar=2,
legend.args=list(text="Rate of Precipitation mm/day",cex=1.25),
xlab='',ylab='',midpoint=T, axes=F, ann=F
)
title(xlab="",cex.lab=1.25,font.lab=2)
axis(1,at=pretty(Lon),tck=-0.015,lwd=2,cex.axis=1.25,font=1)
title(ylab="",cex.lab=1.25,font.lab=2)
axis(2,at=pretty(Lat),tck=-0.015,lwd=2,cex.axis=1.25,font=1,las=1)
title(main=paste("Long Term (1981-2010) Mean Average Monthly Rate of Precipitation in Jan."),
cex.main=1,font.main=2)
# Add map
map('world',add=T,lwd=0.75,col="black")
# Add a box
box(lwd=2)
# Close the png file to save the file
dev.off()
image.plot(Lon, Lat,precip_T_Jan)
image.plot(Lon, Lat,precip_T_Jan)
image.plot(Lon, Lat, precip_T_Jan)
library(lubridate)
library(forecast)
Baoan_Data <- read.csv("2281305.csv", head= TRUE)
names(Baoan_Data)
head(Baoan_Data)
Met_Data <- Baoan_Data %>%
mutate(temp=substr(TMP, 1,5), temp_quality=substr(TMP, 7,7)) %>%
mutate(temp_new = as.numeric(temp), temp_quality_new = as.logical(as.numeric(temp_quality)))
# Handel missing values
Met_Data$temp_new[which(Met_Data$temp_new==9999)]<- NA
for(i in 1:length(Met_Data$temp_new)){
if( is.na(Met_Data$temp_new[i])){
Met_Data$temp_new[i] <- mean(Met_Data$temp_new[(i-2):(i+2)],na.rm=T )
}
}
Met_Data$temp_quality_new[!which(Met_Data$temp_quality_new)]       <- NA
Met_Data1 <- Met_Data %>%
mutate(temp_new=temp_new*0.1)
montly_mean <- c()
for (i in 2010:2020) {
Thisyear_mean <- Met_Data1 %>%
select(DATE, temp_new, temp_quality_new) %>%
mutate(month=substr(DATE, 1, 7)) %>%
mutate(year=substr(DATE,1,4)) %>%
mutate(year2=as.numeric(year)) %>%
filter(year2==i) %>%
group_by(month) %>%
summarise(mean=mean(temp_new, na.rm = T))
montly_mean <- rbind(montly_mean, Thisyear_mean)
}
Monthly_mean1 <- montly_mean %>%
filter(month <= "2020-08" & month >= "2010-01")
View(Monthly_mean1)
# Apply the ts() function
TEMP_mean <- ts(Monthly_mean1$mean, start=c(2010,1), frequency=12)
plot(TEMP_mean, type="l")
plot(TEMP_mean, type="l")
library(dplyr)
library(ggplot2)
library(gapminder)
library(fields);
library(maps);
library(RNetCDF)
library(lubridate)
library(forecast)
Baoan_Data <- read.csv("2281305.csv", head= TRUE)
names(Baoan_Data)
head(Baoan_Data)
Met_Data <- Baoan_Data %>%
mutate(temp=substr(TMP, 1,5), temp_quality=substr(TMP, 7,7)) %>%
mutate(temp_new = as.numeric(temp), temp_quality_new = as.logical(as.numeric(temp_quality)))
# Handel missing values
Met_Data$temp_new[which(Met_Data$temp_new==9999)]<- NA
for(i in 1:length(Met_Data$temp_new)){
if( is.na(Met_Data$temp_new[i])){
Met_Data$temp_new[i] <- mean(Met_Data$temp_new[(i-2):(i+2)],na.rm=T )
}
}
Met_Data$temp_quality_new[!which(Met_Data$temp_quality_new)]       <- NA
Met_Data1 <- Met_Data %>%
mutate(temp_new=temp_new*0.1)
#2.1 Construct a time series of monthly-averaged temperature from 2010 Jan. to 2020 Aug.
montly_mean <- c()
for (i in 2010:2020) {
Thisyear_mean <- Met_Data1 %>%
select(DATE, temp_new, temp_quality_new) %>%
mutate(month=substr(DATE, 1, 7)) %>%
mutate(year=substr(DATE,1,4)) %>%
mutate(year2=as.numeric(year)) %>%
filter(year2==i) %>%
group_by(month) %>%
summarise(mean=mean(temp_new, na.rm = T))
montly_mean <- rbind(montly_mean, Thisyear_mean)
}
Monthly_mean1 <- montly_mean %>%
filter(month <= "2020-08" & month >= "2010-01")
# Apply the ts() function
TEMP_mean <- ts(Monthly_mean1$mean, start=c(2010,1), frequency=12)
plot(TEMP_mean, type="l")
TEMP_mean_components <- decompose(TEMP_mean)
plot(TEMP_mean_components)
# Plot hist
hist(TEMP_mean_components$random, prob=TRUE)
# Add pdf
curve(dnorm(x, mean=mean(TEMP_mean_components$random,na.rm=T),
sd=sd(TEMP_mean_components$random,na.rm=T)),
add=TRUE, col="red")
TEMP_mean_log <- log(TEMP_mean)
plot(TEMP_mean_log, type="l")
TEMP_mean_log_components <- decompose(TEMP_mean_log)
plot(TEMP_mean_log_components)
TEMP_mean_log_d1 <- diff(TEMP_mean_log)
plot(TEMP_mean_log_d1)
TEMP_mean_log_d1 <- diff(TEMP_mean_log)
plot(TEMP_mean_log_d1)
model <- auto.arima(TEMP_mean_log)
model
model1 <- auto.arima(TEMP_mean)
model1
View(Met_Data)
#2.4 Predict monthly-averaged temperatures in 2020 Sep. and Oct. with the ARIMA model from 2.3. The predictions will be evaluated against actual observations in those two months.
# Number of days to predict
days_forecast  <- 10
# Number of include in the plot
days_in_plot   <- 20
# Make predictions using the forecast() function
forecast_10days <- forecast(model, days_forecast)
# Plot
plot(forecast(model, days_forecast), include=days_in_plot,
xlab="Time", ylab="log(global cases)",type="o",lwd=2)
# Sep 20
day_forward <- (2020-2010)*12+9-((2020-2010)*12+8) #(year-start_year)*12+month-((end_year-start_year)*12+end_month)
exp(forecast_10days$mean[day_forward])
exp(forecast_10days$lower[day_forward,1])
exp(forecast_10days$upper[day_forward,1])
# Oct 20
day_forward <- (2020-2010)*12+10-((2020-2010)*12+8)
exp(forecast_10days$mean[day_forward])
exp(forecast_10days$lower[day_forward,1])
exp(forecast_10days$upper[day_forward,1])
model1 <- auto.arima(TEMP_mean)
model1
# Number of days to predict
days_forecast  <- 10
# Number of include in the plot
days_in_plot   <- 20
# Make predictions using the forecast() function
forecast_10days <- forecast(model1, days_forecast)
# Plot
plot(forecast(model1, days_forecast), include=days_in_plot,
xlab="Time", ylab="log(global cases)",type="o",lwd=2)
# Sep 20
day_forward <- (2020-2010)*12+9-((2020-2010)*12+8) #(year-start_year)*12+month-((end_year-start_year)*12+end_month)
forecast_10days$mean[day_forward]
forecast_10days$lower[day_forward,1]
forecast_10days$upper[day_forward,1]
# Oct 20
day_forward <- (2020-2010)*12+10-((2020-2010)*12+8)
forecast_10days$mean[day_forward]
forecast_10days$lower[day_forward,1]
forecast_10days$upper[day_forward,1]
#2.3 Fit an ARIMA(p,d,q) model to the time series. Describe the fitting process in details in your report.
TEMP_mean_log <- log(TEMP_mean)
plot(TEMP_mean_log, type="l")
TEMP_mean_log_components <- decompose(TEMP_mean_log)
plot(TEMP_mean_log_components)
TEMP_mean_log_d1 <- diff(TEMP_mean_log)
plot(TEMP_mean_log_d1)
model <- auto.arima(TEMP_mean_log)
model
TEMP_mean_log <- log(TEMP_mean)
plot(TEMP_mean_log, type="l")
TEMP_mean_log_components <- decompose(TEMP_mean_log)
plot(TEMP_mean_log_components)
# Check acf and pacf
acf(TEMP_mean_log_d1)
pacf(TEMP_mean_log_d1)
TEMP_mean_d1 <- diff(TEMP_mean)
plot(TEMP_mean_d1)
# Check acf and pacf
acf(TEMP_mean_d1)
pacf(TEMP_mean_d1)
TEMP_mean_log <- log(TEMP_mean)
plot(TEMP_mean_log, type="l")
TEMP_mean_log_components <- decompose(TEMP_mean_log)
plot(TEMP_mean_log_components)
TEMP_mean_log_d1 <- diff(TEMP_mean_log)
plot(TEMP_mean_log_d1)
# Check acf and pacf
acf(TEMP_mean_log_d1)
pacf(TEMP_mean_log_d1)
acf(TEMP_mean_log_d1)
pacf(TEMP_mean_log_d1)
model <- auto.arima(TEMP_mean_log)
model
acf(TEMP_mean_log_d1)
acf(TEMP_mean_d1)
TEMP_mean_log <- log(TEMP_mean)
plot(TEMP_mean_log, type="l")
TEMP_mean_log_components <- decompose(TEMP_mean_log)
plot(TEMP_mean_log_components)
library(dplyr)
library(lubridate)
library(forecast)
COVID_data <- read.csv(file = "data_20201108.csv", header = T)
# Check the variable names
head(COVID_data)
# Convert the data.frame to a tibble
COVID_tbl <- as_tibble(COVID_data)
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
# Read in the COVID-19 data
COVID_data <- read.csv(file = "data_20201108.csv", header = T)
# Check the variable names
head(COVID_data)
# Convert the data.frame to a tibble
COVID_tbl <- as_tibble(COVID_data)
# 1.3
# Get global daily new cases
COVID_tbl <- COVID_tbl %>%
mutate(dateRep = as.Date(dateRep,format='%d/%m/%Y')) %>%
group_by(dateRep) %>%
summarize(global_cases = sum(cases))
plot(COVID_tbl$dateRep,COVID_tbl$global_cases,
type="l",xlab="Date",ylab="Global cases")
# Filter the data
# Only use data from April 01
COVID_tbl <- COVID_tbl %>%
filter(dateRep >= as.Date("2020-04-01"))
Convert to ts
# Start date of the time series, read from the .csv file
Date_start <- as.Date("2020-04-01")
# End date of the time series, read from the .csv file
Date_end   <- as.Date("2020-11-08")
# Get the Julian Day of the end date
JD_start   <- yday(Date_start)
# Convert the vector data to a time series
global_cases_ts <- ts(COVID_tbl$global_cases[1:222], start=c(2020,JD_start),frequency=365)
# The indicator of the time series
inds            <- seq(Date_start, Date_end, by = "day")
# Check structure
str(global_cases_ts)
# Plot time series
plot(inds,global_cases_ts)
global_cases_ts_log <- log(global_cases_ts)
# Plot time series
plot(inds,global_cases_ts_log)
# Check acf and pacf
acf(global_cases_ts_log)
pacf(global_cases_ts_log)
# Check acf and pacf
acf(TEMP_mean_log)
pacf(TEMP_mean_log)
global_cases_ts_log_d1 <- diff(global_cases_ts_log)
plot(global_cases_ts_log_d1)
acf(global_cases_ts_log_d1)
pacf(global_cases_ts_log_d1)
model <- auto.arima(global_cases_ts_log)
model
TEMP_mean_log <- log(TEMP_mean)
plot(TEMP_mean_log, type="l")
TEMP_mean_log_components <- decompose(TEMP_mean_log)
plot(TEMP_mean_log_components)
TEMP_mean_log_d1 <- diff(TEMP_mean_log)
plot(TEMP_mean_log_d1)
# Check acf and pacf
acf(TEMP_mean_log_d1)
pacf(TEMP_mean_log_d1)
model <- auto.arima(TEMP_mean_log)
model
plot(inds,global_cases_ts)
#2.4 Predict monthly-averaged temperatures in 2020 Sep. and Oct. with the ARIMA model from 2.3. The predictions will be evaluated against actual observations in those two months.
# Number of days to predict
days_forecast  <- 10
# Number of include in the plot
days_in_plot   <- 20
# Make predictions using the forecast() function
forecast_10days <- forecast(model, days_forecast)
# Plot
plot(forecast(model, days_forecast), include=days_in_plot,
xlab="Time", ylab="log(global cases)",type="o",lwd=2)
# Sep 20
day_forward <- (2020-2010)*12+9-((2020-2010)*12+8) #(year-start_year)*12+month-((end_year-start_year)*12+end_month)
exp(forecast_10days$mean[day_forward])
exp(forecast_10days$lower[day_forward,1])
exp(forecast_10days$upper[day_forward,1])
# Oct 20
day_forward <- (2020-2010)*12+10-((2020-2010)*12+8)
exp(forecast_10days$mean[day_forward])
exp(forecast_10days$lower[day_forward,1])
exp(forecast_10days$upper[day_forward,1])
View(montly_mean)
